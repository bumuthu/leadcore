service: lq

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-2
  stage: dev1
  lambdaHashingVersion: '20201221'
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-2.amazonaws.com/us-east-2_KwE2BHUY1
        audience: 3agvvhnm9maoubjl5eb4jurrtt

plugins:
  - serverless-webpack

package:
  include:
    - src/**/*
    - reference-data/*
  exclude:
    - node_modules/**/*
    - .serverless/**/*
    - .vscode/**/*

functions:

  ### Auth
  UserSignInHandler:
    handler: src/handlers/auth-handler.signIn
    events:
      - httpApi:
          method: POST
          path: /api/v1/auth/login

  UserSignUpHandler:
    handler: src/handlers/auth-handler.signUp
    events:
      - httpApi:
          method: POST
          path: /api/v1/auth/register
          
  UserVerificationHandler:
    handler: src/handlers/auth-handler.verifyUser
    events:
      - httpApi:
          method: GET
          path: /api/v1/auth/verification

          
  UserVerificationResendHandler:
    handler: src/handlers/auth-handler.resendVerification
    events:
      - httpApi:
          method: GET
          path: /api/v1/auth/resend-verification

  AccessTokenRetrievalHandler:
    handler: src/handlers/auth-handler.getAccessToken
    events:
      - httpApi:
          method: GET
          path: /api/v1/auth/linkedinAccessToken
          authorizer: serviceAuthorizer

  UserForgotPasswordHandler:
    handler: src/handlers/auth-handler.forgotPassword
    events:
      - httpApi:
          method: PUT
          path: /api/v1/auth/forgot-password

  UserPasswordChangeHandler:
    handler: src/handlers/auth-handler.changePassword
    events:
      - httpApi:
          method: PUT
          path: /api/v1/auth/change-password
          
          
  ### Reference Data
  RefDataLoadHandler:
    handler: src/handlers/refdata-handler.getRefData
    events:
      - httpApi:
          method: GET
          path: /api/v1/refdata
          authorizer: serviceAuthorizer

  RefDataResetHandler:
    handler: src/handlers/refdata-handler.resetRefData
    events:
      - httpApi:
          method: GET
          path: /api/v1/refdata/reset
          # authorizer: serviceAuthorizer

          
  ### User
  UserRetrievalHandler:
    handler: src/handlers/user-handler.getUserByToken
    events:
      - httpApi:
          method: GET
          path: /api/v1/user
          authorizer: serviceAuthorizer

  UserUpdateHandler:
    handler: src/handlers/user-handler.updateUserByToken
    events:
      - httpApi:
          method: PUT
          path: /api/v1/user
          authorizer: serviceAuthorizer


  ### Team
  TeamRetrievalHandler:
    handler: src/handlers/team-handler.getTeamById
    events:
      - httpApi:
          method: GET
          path: /api/v1/team/{teamId}
          authorizer: serviceAuthorizer

  TeamUpdateHandler:
    handler: src/handlers/team-handler.updateTeamById
    events:
      - httpApi:
          method: PUT
          path: /api/v1/team/{teamId}
          authorizer: serviceAuthorizer

  NewTeamHandler:
    handler: src/handlers/team-handler.createTeam
    events:
      - httpApi:
          method: POST
          path: /api/v1/team/new
          authorizer: serviceAuthorizer


  ### Customer
  CustomerRetrievalHandler: 
    handler: src/controllers/customer-controller.getCustomerById
    events:
      - httpApi:
          method: GET
          path: /api/v1/customer/single/{customerId}
          authorizer: serviceAuthorizer

  CustomerUpdateHandler: 
    handler: src/controllers/customer-controller.updateCustomerById
    events:
      - httpApi:
          method: PUT
          path: /api/v1/customer/single/{customerId}
          authorizer: serviceAuthorizer

  NewCustomerHandler: 
    handler: src/controllers/customer-controller.createCustomer
    events:
      - httpApi:
          method: POST
          path: /api/v1/customer/single/new
          authorizer: serviceAuthorizer

  CustomersListRetrievalHandler: 
    handler: src/controllers/customer-controller.getCustomersListByIds
    events:
      - httpApi:
          method: GET
          path: /api/v1/customer/list/{customerIds}
          authorizer: serviceAuthorizer

  NewCustomerListHandler: 
    handler: src/controllers/customer-controller.createCustomersList
    events:
      - httpApi:
          method: POST
          path: /api/v1/customer/list/new
          authorizer: serviceAuthorizer


  ### Campaign
  CampaignRetrievalHandler:
    handler: src/controllers/campaign-controller.getCampaignById
    events:
      - httpApi:
          method: GET
          path: /api/v1/campaign/{campaignId}
          authorizer: serviceAuthorizer

  CampaignUpdateHandler:
    handler: src/controllers/campaign-controller.updateCampaignById
    events:
      - httpApi:
          method: PUT
          path: /api/v1/campaign/{campaignId}
          authorizer: serviceAuthorizer

  NewCampaignHandler:
    handler: src/controllers/campaign-controller.createCampaign
    events:
      - httpApi:
          method: POST
          path: /api/v1/campaign/new
          authorizer: serviceAuthorizer

  PipelineStageChangeHandler:
    handler: src/controllers/campaign-controller.changePipelineStage
    events:
      - httpApi:
          method: PUT
          path: /api/v1/campaign/pipeline/stageChange
          authorizer: serviceAuthorizer


custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  