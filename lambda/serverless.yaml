service: lq

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-2
  stage: dev1
  lambdaHashingVersion: '20201221'
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-2.amazonaws.com/us-east-2_oA3vL0NU6
        audience: 1gtgjrm2oj3u0cnkks0j3hkneg

plugins:
  - serverless-webpack

package:
  include:
    - src/**/*
    - reference-data/*
  exclude:
    - node_modules/**/*
    - .serverless/**/*
    - .vscode/**/*

functions:

  ### Auth
  UserSignInHandler:
    handler: src/handlers/auth-handler.signIn
    events:
      - httpApi:
          method: POST
          path: /api/v1/auth/login

  UserSignUpHandler:
    handler: src/handlers/auth-handler.signUp
    events:
      - httpApi:
          method: POST
          path: /api/v1/auth/register
          
  UserVerificationHandler:
    handler: src/handlers/auth-handler.verifyUser
    events:
      - httpApi:
          method: POST
          path: /api/v1/auth/verification

          
  UserVerificationResendHandler:
    handler: src/handlers/auth-handler.resendVerification
    events:
      - httpApi:
          method: POST
          path: /api/v1/auth/resend-verification

  AccessTokenRetrievalHandler:
    handler: src/handlers/auth-handler.getAccessToken
    events:
      - httpApi:
          method: GET
          path: /api/v1/auth/linkedinAccessToken
          authorizer: serviceAuthorizer


  ### Reference Data
  RefDataLoadHandler:
    handler: src/controllers/refdata-controller.getRefData
    events:
      - httpApi:
          method: GET
          path: /api/v1/refdata
          authorizer: serviceAuthorizer

  RefDataResetHandler:
    handler: src/controllers/refdata-controller.resetRefData
    events:
      - httpApi:
          method: GET
          path: /api/v1/refdata/reset
          authorizer: serviceAuthorizer


  ### User
  # UserRetrievalByIdHandler:
  #   handler: src/controllers/user-controller.getUserById
  #   events:
  #     - httpApi:
  #         method: GET
  #         path: /api/v1/user/{userId}

  UserRetrievalHandler:
    handler: src/controllers/user-controller.getUserByToken
    events:
      - httpApi:
          method: GET
          path: /api/v1/user
          authorizer: serviceAuthorizer
          
  # UserUpdateByIdHandler:
  #   handler: src/controllers/user-controller.updateUserById
  #   events:
  #     - httpApi:
  #         method: PUT
  #         path: /api/v1/user/{userId}

  UserUpdateHandler:
    handler: src/controllers/user-controller.updateUserByToken
    events:
      - httpApi:
          method: PUT
          path: /api/v1/user
          authorizer: serviceAuthorizer

  # NewUserHandler:
  #   handler: src/controllers/user-controller.createUser
  #   events:
  #     - httpApi:
  #         method: POST
  #         path: /api/v1/user/new


  ### Team
  TeamRetrievalHandler:
    handler: src/controllers/team-controller.getTeamById
    events:
      - httpApi:
          method: GET
          path: /api/v1/team/{teamId}
          authorizer: serviceAuthorizer

  TeamUpdateHandler:
    handler: src/controllers/team-controller.updateTeamById
    events:
      - httpApi:
          method: PUT
          path: /api/v1/team/{teamId}
          authorizer: serviceAuthorizer

  NewTeamHandler:
    handler: src/controllers/team-controller.createTeam
    events:
      - httpApi:
          method: POST
          path: /api/v1/team/new
          authorizer: serviceAuthorizer


  ### Customer
  CustomerRetrievalHandler: 
    handler: src/controllers/customer-controller.getCustomerById
    events:
      - httpApi:
          method: GET
          path: /api/v1/customer/single/{customerId}
          authorizer: serviceAuthorizer

  CustomerUpdateHandler: 
    handler: src/controllers/customer-controller.updateCustomerById
    events:
      - httpApi:
          method: PUT
          path: /api/v1/customer/single/{customerId}
          authorizer: serviceAuthorizer

  NewCustomerHandler: 
    handler: src/controllers/customer-controller.createCustomer
    events:
      - httpApi:
          method: POST
          path: /api/v1/customer/single/new
          authorizer: serviceAuthorizer

  CustomersListRetrievalHandler: 
    handler: src/controllers/customer-controller.getCustomersListByIds
    events:
      - httpApi:
          method: GET
          path: /api/v1/customer/list/{customerIds}
          authorizer: serviceAuthorizer

  NewCustomerListHandler: 
    handler: src/controllers/customer-controller.createCustomersList
    events:
      - httpApi:
          method: POST
          path: /api/v1/customer/list/new
          authorizer: serviceAuthorizer


  ### Campaign
  CampaignRetrievalHandler:
    handler: src/controllers/campaign-controller.getCampaignById
    events:
      - httpApi:
          method: GET
          path: /api/v1/campaign/{campaignId}
          authorizer: serviceAuthorizer

  CampaignUpdateHandler:
    handler: src/controllers/campaign-controller.updateCampaignById
    events:
      - httpApi:
          method: PUT
          path: /api/v1/campaign/{campaignId}
          authorizer: serviceAuthorizer

  NewCampaignHandler:
    handler: src/controllers/campaign-controller.createCampaign
    events:
      - httpApi:
          method: POST
          path: /api/v1/campaign/new
          authorizer: serviceAuthorizer

  PipelineStageChangeHandler:
    handler: src/controllers/campaign-controller.changePipelineStage
    events:
      - httpApi:
          method: PUT
          path: /api/v1/campaign/pipeline/stageChange
          authorizer: serviceAuthorizer


custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  